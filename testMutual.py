#!/usr/bin/python

import sys
from time import time
from satRels import *
from models import *


def bakery():
    
    m0 = Location('c[0]')
    m1 = Location('c[1]')
    m2 = Location('n[0]')
    m3 = Location('n[1]')
    a0 = Register('a0')
    a1 = Register('a1')
    a2 = Register('a2')
    b0 = Register('b0')
    b1 = Register('b1')
    b2 = Register('b2')
    r0 = Register('r0')
    r1 = Register('r1')
    chk = Register('chk')
    q0 = Register('q0')
    q1 = Register('q1')
    chk2 = Register('chk')
    c0 = Expression(0)
    c1 = Expression(1)
    
    e1 = Local(a0, c1)
    e2 = Store(m0, a0)
    e3 = Load(r0, m3)
    e4 = Local(r1, Expression(r0, '+', c1))
    e5 = Store(m2, r1)
    e6 = Local(a1, c0)
    e7 = Store(m0, a1)
    e8 = Load(chk, m1)
    e9 = Load(chk, m1)
    e10 = Load(r0, m3)
    e11 = Load(r0, m3)
    e12 = Local(a2, c0)
    e13 = Store(m2, a2)
    
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(e3, Seq(e4, Seq(e5, Seq(e6, Seq(e7, Seq(e8, Seq(While(Predicate(chk, '!=', c0), e9), Seq(e10, Seq(While(Predicate(Predicate(r0, '!=', c0), 'and', Predicate(r0, '<', r1)), e11), Seq(e12, e13)))))))))))))
    
    f1 = Local(b0, c1)
    f2 = Store(m1, b0)
    f3 = Load(q0, m2)
    f4 = Local(q1, Expression(q0, '+', c1))
    f5 = Store(m3, q1)
    f6 = Local(b1, c0)
    f7 = Store(m1, b1)
    f8 = Load(chk2, m0)
    f9 = Load(chk2, m0)
    f10 = Load(q0, m3)
    f11 = Load(q0, m3)
    f12 = Local(b2, c0)
    f13 = Store(m0, b2)
    
    r = While(Expression(True), Seq(f1, Seq(f2, Seq(f3, Seq(f4, Seq(f5, Seq(f6, Seq(f7, Seq(f8, Seq(While(Predicate(chk2, '!=', c0), f9), Seq(f10, Seq(While(Predicate(Predicate(q0, '!=', c0), 'and', Predicate(q0, '<', q1)), f11), Seq(f12, f13)))))))))))))
    
    m = Program('Bakery')
    m.add(p)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def bakery_x86():
    ### Fences added manually
    
    m0 = Location('c[0]')
    m1 = Location('c[1]')
    m2 = Location('n[0]')
    m3 = Location('n[1]')
    a0 = Register('a0')
    a1 = Register('a1')
    a2 = Register('a2')
    b0 = Register('b0')
    b1 = Register('b1')
    b2 = Register('b2')
    r0 = Register('r0')
    r1 = Register('r1')
    chk = Register('chk')
    q0 = Register('q0')
    q1 = Register('q1')
    chk2 = Register('chk')
    c0 = Expression(0)
    c1 = Expression(1)
    
    e1 = Local(a0, c1)
    e2 = Store(m0, a0)
    e3 = Load(r0, m3)
    e4 = Local(r1, Expression(r0, '+', c1))
    e5 = Store(m2, r1)
    e6 = Local(a1, c0)
    e7 = Store(m0, a1)
    e8 = Load(chk, m1)
    e9 = Load(chk, m1)
    e10 = Load(r0, m3)
    e11 = Load(r0, m3)
    e12 = Local(a2, c0)
    e13 = Store(m2, a2)
    
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Mfence(), Seq(e3, Seq(e4, Seq(e5, Seq(e6, Seq(e7, Seq(Mfence(), Seq(e8, Seq(While(Predicate(chk, '!=', c0), e9), Seq(e10, Seq(While(Predicate(Predicate(r0, '!=', c0), 'and', Predicate(r0, '<', r1)), e11), Seq(e12, e13)))))))))))))))
    
    f1 = Local(b0, c1)
    f2 = Store(m1, b0)
    f3 = Load(q0, m2)
    f4 = Local(q1, Expression(q0, '+', c1))
    f5 = Store(m3, q1)
    f6 = Local(b1, c0)
    f7 = Store(m1, b1)
    f8 = Load(chk2, m0)
    f9 = Load(chk2, m0)
    f10 = Load(q0, m3)
    f11 = Load(q0, m3)
    f12 = Local(b2, c0)
    f13 = Store(m0, b2)
    
    r = While(Expression(True), Seq(f1, Seq(f2, Seq(Mfence(), Seq(f3, Seq(f4, Seq(f5, Seq(Mfence(), Seq(f6, Seq(f7, Seq(Mfence(), Seq(f8, Seq(While(Predicate(chk2, '!=', c0), f9), Seq(f10, Seq(While(Predicate(Predicate(q0, '!=', c0), 'and', Predicate(q0, '<', q1)), f11), Seq(f12, f13))))))))))))))))
    
    m = Program('Bakery x86')
    m.add(p)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def bakery_x86_sync():
    ### Fences added manually
    
    m0 = Location('c[0]')
    m1 = Location('c[1]')
    m2 = Location('n[0]')
    m3 = Location('n[1]')
    a0 = Register('a0')
    a1 = Register('a1')
    a2 = Register('a2')
    b0 = Register('b0')
    b1 = Register('b1')
    b2 = Register('b2')
    r0 = Register('r0')
    r1 = Register('r1')
    chk = Register('chk')
    q0 = Register('q0')
    q1 = Register('q1')
    chk2 = Register('chk')
    c0 = Expression(0)
    c1 = Expression(1)
    
    e1 = Local(a0, c1)
    e2 = Store(m0, a0)
    e3 = Load(r0, m3)
    e4 = Local(r1, Expression(r0, '+', c1))
    e5 = Store(m2, r1)
    e6 = Local(a1, c0)
    e7 = Store(m0, a1)
    e8 = Load(chk, m1)
    e9 = Load(chk, m1)
    e10 = Load(r0, m3)
    e11 = Load(r0, m3)
    e12 = Local(a2, c0)
    e13 = Store(m2, a2)
    
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Sync(), Seq(e3, Seq(e4, Seq(e5, Seq(e6, Seq(e7, Seq(Sync(), Seq(e8, Seq(While(Predicate(chk, '!=', c0), e9), Seq(e10, Seq(While(Predicate(Predicate(r0, '!=', c0), 'and', Predicate(r0, '<', r1)), e11), Seq(e12, e13)))))))))))))))
    
    f1 = Local(b0, c1)
    f2 = Store(m1, b0)
    f3 = Load(q0, m2)
    f4 = Local(q1, Expression(q0, '+', c1))
    f5 = Store(m3, q1)
    f6 = Local(b1, c0)
    f7 = Store(m1, b1)
    f8 = Load(chk2, m0)
    f9 = Load(chk2, m0)
    f10 = Load(q0, m3)
    f11 = Load(q0, m3)
    f12 = Local(b2, c0)
    f13 = Store(m0, b2)
    
    r = While(Expression(True), Seq(f1, Seq(f2, Seq(Sync(), Seq(f3, Seq(f4, Seq(f5, Seq(Sync(), Seq(f6, Seq(f7, Seq(Sync(), Seq(f8, Seq(While(Predicate(chk2, '!=', c0), f9), Seq(f10, Seq(While(Predicate(Predicate(q0, '!=', c0), 'and', Predicate(q0, '<', q1)), f11), Seq(f12, f13))))))))))))))))
    
    m = Program('Bakery x86 (sync)')
    m.add(p)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def bakery_power():
    ### Fences added manually
    
    m0 = Location('c[0]')
    m1 = Location('c[1]')
    m2 = Location('n[0]')
    m3 = Location('n[1]')
    a0 = Register('a0')
    a1 = Register('a1')
    a2 = Register('a2')
    b0 = Register('b0')
    b1 = Register('b1')
    b2 = Register('b2')
    r0 = Register('r0')
    r1 = Register('r1')
    chk = Register('chk')
    q0 = Register('q0')
    q1 = Register('q1')
    chk2 = Register('chk')
    c0 = Expression(0)
    c1 = Expression(1)
    
    e1 = Local(a0, c1)
    e2 = Store(m0, a0)
    e3 = Load(r0, m3)
    e4 = Local(r1, Expression(r0, '+', c1))
    e5 = Store(m2, r1)
    e6 = Local(a1, c0)
    e7 = Store(m0, a1)
    e8 = Load(chk, m1)
    e9 = Load(chk, m1)
    e10 = Load(r0, m3)
    e11 = Load(r0, m3)
    e12 = Local(a2, c0)
    e13 = Store(m2, a2)
    
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Sync(), Seq(e3, Seq(e4, Seq(e5, Seq(e6, Seq(e7, Seq(Sync(), Seq(e8, Seq(Lwsync(), Seq(While(Predicate(chk, '!=', c0), Seq(e9, Lwsync())), Seq(e10, Seq(Lwsync(), Seq(While(Predicate(Predicate(r0, '!=', c0), 'and', Predicate(r0, '<', r1)), e11), Seq(e12, e13)))))))))))))))))
    
    f1 = Local(b0, c1)
    f2 = Store(m1, b0)
    f3 = Load(q0, m2)
    f4 = Local(q1, Expression(q0, '+', c1))
    f5 = Store(m3, q1)
    f6 = Local(b1, c0)
    f7 = Store(m1, b1)
    f8 = Load(chk2, m0)
    f9 = Load(chk2, m0)
    f10 = Load(q0, m3)
    f11 = Load(q0, m3)
    f12 = Local(b2, c0)
    f13 = Store(m0, b2)
    
    r = While(Expression(True), Seq(f1, Seq(f2, Seq(Sync(), Seq(f3, Seq(Lwsync(), Seq(f4, Seq(f5, Seq(Sync(), Seq(f6, Seq(f7, Seq(Sync(), Seq(f8, Seq(While(Predicate(chk2, '!=', c0), f9), Seq(f10, Seq(While(Predicate(Predicate(q0, '!=', c0), 'and', Predicate(q0, '<', q1)), f11), Seq(f12, f13)))))))))))))))))
    
    m = Program('Bakery Power')
    m.add(p)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def burns():
    
    a = Register("a")
    b = Register("b")
    chk1 = Register("chk")
    chk2 = Register("chk")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    
    b1 = Predicate(chk1, "!=", c0)
    e0 = Local(a, c1)
    e1 = Store(x, a)
    e2 = Load(chk1, y)
    e3 = Load(chk1, y)
    e4 = Local(a, c0)
    e5 = Store(x, a)
    p = While(Expression(True), Seq(e0, Seq(e1, Seq(e2, Seq(While(b1, e3), Seq(e4, e5))))))
    
    b2 = Predicate(chk2, "!=", c0)
    b3 = Predicate(chk2, "==", c0)
    e6 = Load(chk2, x)
    e7 = Load(chk2, x)
    e8 = Local(b, c1)
    e9 = Store(y, b)
    e10 = Load(chk2, x)
    e11 = Local(b, c0)
    e12 = Store(y, b)
    e13 = Store(y, b)
    q = While(Expression(True), Seq(e6, Seq(While(b2, e7), Seq(e8, Seq(e9, Seq(e10, Seq(e11, If(b3, e12, e13))))))))
    
    m = Program('Burns')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def burns_x86():
    
    a = Register("a")
    b = Register("b")
    chk1 = Register("chk")
    chk2 = Register("chk")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    
    b1 = Predicate(chk1, "!=", c0)
    e0 = Local(a, c1)
    e1 = Store(x, a)
    e2 = Load(chk1, y)
    e3 = Load(chk1, y)
    e4 = Local(a, c0)
    e5 = Store(x, a)
    m1 = Mfence()
    p = While(Expression(True), Seq(e0, Seq(e1, Seq(m1, Seq(e2, Seq(While(b1, e3), Seq(e4, e5)))))))
    
    b2 = Predicate(chk2, "!=", c0)
    b3 = Predicate(chk2, "==", c0)
    e6 = Load(chk2, x)
    e7 = Load(chk2, x)
    e8 = Local(b, c1)
    e9 = Store(y, b)
    e10 = Load(chk2, x)
    e11 = Local(b, c0)
    e12 = Store(y, b)
    e13 = Store(y, b)
    m2 = Mfence()
    q = While(Expression(True), Seq(e6, Seq(While(b2, e7), Seq(e8, Seq(e9, Seq(m2, Seq(e10, Seq(e11, If(b3, e12, e13)))))))))
    
    m = Program('Burns x86')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def burns_x86_sync():
    
    a = Register("a")
    b = Register("b")
    chk1 = Register("chk")
    chk2 = Register("chk")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    
    b1 = Predicate(chk1, "!=", c0)
    e0 = Local(a, c1)
    e1 = Store(x, a)
    e2 = Load(chk1, y)
    e3 = Load(chk1, y)
    e4 = Local(a, c0)
    e5 = Store(x, a)
    m1 = Sync()
    p = While(Expression(True), Seq(e0, Seq(e1, Seq(m1, Seq(e2, Seq(While(b1, e3), Seq(e4, e5)))))))
    
    b2 = Predicate(chk2, "!=", c0)
    b3 = Predicate(chk2, "==", c0)
    e6 = Load(chk2, x)
    e7 = Load(chk2, x)
    e8 = Local(b, c1)
    e9 = Store(y, b)
    e10 = Load(chk2, x)
    e11 = Local(b, c0)
    e12 = Store(y, b)
    e13 = Store(y, b)
    m2 = Sync()
    q = While(Expression(True), Seq(e6, Seq(While(b2, e7), Seq(e8, Seq(e9, Seq(m2, Seq(e10, Seq(e11, If(b3, e12, e13)))))))))
    
    m = Program('Burns x86 (sync)')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def burns_power():
    ### Barrieres added manually
    
    a = Register("a")
    b = Register("b")
    chk1 = Register("chk")
    chk2 = Register("chk")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    
    b1 = Predicate(chk1, "!=", c0)
    e0 = Local(a, c1)
    e1 = Store(x, a)
    m1 = Sync()
    e2 = Load(chk1, y)
    e3 = Load(chk1, y)
    e4 = Local(a, c0)
    e5 = Store(x, a)
    p = While(Expression(True), Seq(e0, Seq(e1, Seq(m1, Seq(e2, Seq(While(b1, e3), Seq(Lwsync(), Seq(e4, e5))))))))
    
    b2 = Predicate(chk2, "!=", c0)
    b3 = Predicate(chk2, "==", c0)
    e6 = Load(chk2, x)
    e7 = Load(chk2, x)
    e8 = Local(b, c1)
    e9 = Store(y, b)
    e10 = Load(chk2, x)
    e11 = Local(b, c0)
    e12 = Store(y, b)
    e13 = Store(y, b)
    m2 = Sync()
    q = While(Expression(True), Seq(e6, Seq(While(b2, e7), Seq(Lwsync(), Seq(e8, Seq(e9, Seq(m2, Seq(e10, Seq(e11, If(b3, e12, e13))))))))))
    
    m = Program('Burns Power')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def dekker():

    flag0 = Location("flag[0]")
    flag1 = Location("flag[1]")
    turn = Location("turn")
    a = Register("a")
    b = Register("b")
    c = Register("c")
    d = Register("d")
    t1 = Register("t1")
    f1 = Register("f1")
    t2 = Register("t2")
    f2 = Register("f2")
    c1 = Expression(1)
    c0 = Expression(0)

    a1 = Local(a, c1)
    b0 = Local(b, c0)
    e1 = Store(flag0, a)
    e2 = Load(f1, flag1)
    e3 = Load(t1, turn)
    e4 = Store(flag0, b)
    e5 = Load(t1, turn)
    e51 = Load(t1, turn)
    e6 = Store(flag0, a)
    e7 = Store(turn, a)
    e8 = Store(flag0, b)
    p = While(Expression(True), Seq(a1, Seq(b0, Seq(e1, Seq(e2, Seq(While(Predicate(f1, "==", c1), Seq(e3, If(Predicate(t1, "!=", c0), Seq(e4, Seq(e5, Seq(While(Predicate(t1, "!=", c0), e51), e6))), Skip()))), Seq(e7, e8)))))))
 
    co1 = Local(c, c1)
    d0 = Local(d, c0)
    g1 = Store(flag1, c)
    g2 = Load(f2, flag0)
    g3 = Load(t2, turn)
    g4 = Store(flag1, d)
    g5 = Load(t2, turn)
    g51 = Load(t2, turn)
    g6 = Store(flag1, c)
    g7 = Store(turn, c)
    g8 = Store(flag1, d)
    q = While(Expression(True), Seq(co1, Seq(d0, Seq(g1, Seq(g2, Seq(While(Predicate(f2, "==", c1), Seq(g3, If(Predicate(t2, "!=", c0), Seq(g4, Seq(g5, Seq(While(Predicate(t2, "!=", c0), g51), g6))), Skip()))), Seq(g7, g8)))))))

    m = Program('Dekker')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def dekker_x86():

    flag0 = Location("flag[0]")
    flag1 = Location("flag[1]")
    turn = Location("turn")
    a = Register("a")
    b = Register("b")
    c = Register("c")
    d = Register("d")
    t1 = Register("t1")
    f1 = Register("f1")
    t2 = Register("t2")
    f2 = Register("f2")
    c1 = Expression(1)
    c0 = Expression(0)

    a1 = Local(a, c1)
    b0 = Local(b, c0)
    e1 = Store(flag0, a)
    m1 = Mfence()
    e2 = Load(f1, flag1)
    e3 = Load(t1, turn)
    e4 = Store(flag0, b)
    m2 = Mfence()
    e5 = Load(t1, turn)
    e51 = Load(t1, turn)
    e6 = Store(flag0, a)
    e7 = Store(turn, a)
    e8 = Store(flag0, b)
    p = While(Expression(True), Seq(a1, Seq(b0, Seq(e1, Seq(m1, Seq(e2, Seq(While(Predicate(f1, "==", c1), Seq(e3, If(Predicate(t1, "!=", c0), Seq(e4, Seq(m2, Seq(e5, Seq(While(Predicate(t1, "!=", c0), e51), e6)))), Skip()))), Seq(e7, e8))))))))

    co1 = Local(c, c1)
    d0 = Local(d, c0)
    g1 = Store(flag1, c)
    m3 = Mfence()
    g2 = Load(f2, flag0)
    g3 = Load(t2, turn)
    g4 = Store(flag1, d)
    m4 = Mfence()
    g5 = Load(t2, turn)
    g51 = Load(t2, turn)
    g6 = Store(flag1, c)
    g7 = Store(turn, c)
    g8 = Store(flag1, d)
    q = While(Expression(True), Seq(co1, Seq(d0, Seq(g1, Seq(m3, Seq(g2, Seq(While(Predicate(f2, "==", c1), Seq(g3, If(Predicate(t2, "!=", c0), Seq(g4, Seq(m4, Seq(g5, Seq(While(Predicate(t2, "!=", c0), g51), g6)))), Skip()))), Seq(g7, g8))))))))

    m = Program('Dekker x86')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def dekker_x86_sync():

    flag0 = Location("flag[0]")
    flag1 = Location("flag[1]")
    turn = Location("turn")
    a = Register("a")
    b = Register("b")
    c = Register("c")
    d = Register("d")
    t1 = Register("t1")
    f1 = Register("f1")
    t2 = Register("t2")
    f2 = Register("f2")
    c1 = Expression(1)
    c0 = Expression(0)

    a1 = Local(a, c1)
    b0 = Local(b, c0)
    e1 = Store(flag0, a)
    m1 = Sync()
    e2 = Load(f1, flag1)
    e3 = Load(t1, turn)
    e4 = Store(flag0, b)
    m2 = Sync()
    e5 = Load(t1, turn)
    e51 = Load(t1, turn)
    e6 = Store(flag0, a)
    e7 = Store(turn, a)
    e8 = Store(flag0, b)
    p = While(Expression(True), Seq(a1, Seq(b0, Seq(e1, Seq(m1, Seq(e2, Seq(While(Predicate(f1, "==", c1), Seq(e3, If(Predicate(t1, "!=", c0), Seq(e4, Seq(m2, Seq(e5, Seq(While(Predicate(t1, "!=", c0), e51), e6)))), Skip()))), Seq(e7, e8))))))))

    co1 = Local(c, c1)
    d0 = Local(d, c0)
    g1 = Store(flag1, c)
    m3 = Sync()
    g2 = Load(f2, flag0)
    g3 = Load(t2, turn)
    g4 = Store(flag1, d)
    m4 = Sync()
    g5 = Load(t2, turn)
    g51 = Load(t2, turn)
    g6 = Store(flag1, c)
    g7 = Store(turn, c)
    g8 = Store(flag1, d)
    q = While(Expression(True), Seq(co1, Seq(d0, Seq(g1, Seq(m3, Seq(g2, Seq(While(Predicate(f2, "==", c1), Seq(g3, If(Predicate(t2, "!=", c0), Seq(g4, Seq(m4, Seq(g5, Seq(While(Predicate(t2, "!=", c0), g51), g6)))), Skip()))), Seq(g7, g8))))))))

    m = Program('Dekker x86 (sync)')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def dekker_power():
    ### Barrieres added manually

    flag0 = Location("flag[0]")
    flag1 = Location("flag[1]")
    turn = Location("turn")
    a = Register("a")
    b = Register("b")
    c = Register("c")
    d = Register("d")
    t1 = Register("t1")
    f1 = Register("f1")
    t2 = Register("t2")
    f2 = Register("f2")
    c1 = Expression(1)
    c0 = Expression(0)

    a1 = Local(a, c1)
    b0 = Local(b, c0)
    e1 = Store(flag0, a)
    m1 = Sync()
    e2 = Load(f1, flag1)
    e3 = Load(t1, turn)
    e4 = Store(flag0, b)
    m2 = Sync()
    e5 = Load(t1, turn)
    e51 = Load(t1, turn)
    e6 = Store(flag0, a)
    e7 = Store(turn, a)
    e8 = Store(flag0, b)
    p = While(Expression(True), Seq(a1, Seq(b0, Seq(e1, Seq(m1, Seq(e2, Seq(While(Predicate(f1, "==", c1), Seq(e3, If(Predicate(t1, "!=", c0), Seq(e4, Seq(m2, Seq(e5, Seq(While(Predicate(t1, "!=", c0), e51), e6)))), Skip()))), Seq(e7, Seq(Sync(), e8)))))))))

    co1 = Local(c, c1)
    d0 = Local(d, c0)
    g1 = Store(flag1, c)
    m3 = Sync()
    g2 = Load(f2, flag0)
    g3 = Load(t2, turn)
    g4 = Store(flag1, d)
    m4 = Sync()
    g5 = Load(t2, turn)
    g51 = Load(t2, turn)
    g6 = Store(flag1, c)
    g7 = Store(turn, c)
    g8 = Store(flag1, d)
    q = While(Expression(True), Seq(co1, Seq(d0, Seq(g1, Seq(m3, Seq(g2, Seq(While(Predicate(f2, "==", c1), Seq(g3, If(Predicate(t2, "!=", c0), Seq(g4, Seq(m4, Seq(g5, Seq(While(Predicate(t2, "!=", c0), g51), g6)))), Skip()))), Seq(g7, Seq(Sync(), g8)))))))))

    m = Program('Dekker Power')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def lamport():
    ### This is Lamport's fast mutex
    
    a = Register("a")
    i = Register("i")
    x1 = Register("x1")
    y1 = Register("y1")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    
    b11 = Predicate(y1, "!=", i)
    b12 = Predicate(y1, "!=", c0)
    b13 = Predicate(x1, "==", i)
    
    e1 = Local(i, c1)
    e2 = Store(x, i)
    e3 = Load(y1, y)
    e4 = Store(x, i)
    e5 = Load(y1, y)
    e6 = Store(y, i)
    e7 = Load(x1, x)
    e8 = Local(y1, i)
    e9 = Load(y1, y)
    e10 = Local(a, c0)
    e11 = Store(y, a)
    p = Seq(e1, Seq(While(b11, Seq(e2, Seq(e3, Seq(While(b12, Seq(e4, e5)), Seq(e6, Seq(e7, If(b13, e8, e9))))))), Seq(e10, e11)))
    
    b = Register("b")
    j = Register("j")
    x2 = Register("x2")
    y2 = Register("y2")
    b21 = Predicate(y1, "!=", i)
    b22 = Predicate(y1, "!=", c0)
    b23 = Predicate(x1, "==", i)
    
    e1 = Local(j, c2)
    e2 = Store(x, j)
    e3 = Load(y2, y)
    e4 = Store(x, j)
    e5 = Load(y2, y)
    e6 = Store(y, j)
    e7 = Load(x2, x)
    e8 = Local(y2, j)
    e9 = Load(y2, y)
    e10 = Local(b, c0)
    e11 = Store(y, b)
    q = Seq(e1, Seq(While(b21, Seq(e2, Seq(e3, Seq(While(b22, Seq(e4, e5)), Seq(e6, Seq(e7, If(b23, e8, e9))))))), Seq(e10, e11)))
    
    c = Register("c")
    k = Register("k")
    x3 = Register("x3")
    y3 = Register("y3")
    b31 = Predicate(y1, "!=", i)
    b32 = Predicate(y1, "!=", c0)
    b33 = Predicate(x1, "==", i)
    
    e1 = Local(k, c3)
    e2 = Store(x, k)
    e3 = Load(y3, y)
    e4 = Store(x, k)
    e5 = Load(y3, y)
    e6 = Store(y, k)
    e7 = Load(x3, x)
    e8 = Local(y3, k)
    e9 = Load(y3, y)
    e10 = Local(c, c0)
    e11 = Store(y, c)
    r = Seq(e1, Seq(While(b31, Seq(e2, Seq(e3, Seq(While(b32, Seq(e4, e5)), Seq(e6, Seq(e7, If(b33, e8, e9))))))), Seq(e10, e11)))
    
    m = Program('Lamport')
    m.add(p)
    m.add(q)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def lamport_x86():
    
    a = Register("a")
    i = Register("i")
    x1 = Register("x1")
    y1 = Register("y1")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    
    b11 = Predicate(y1, "!=", i)
    b12 = Predicate(y1, "!=", c0)
    b13 = Predicate(x1, "==", i)
    
    e1 = Local(i, c1)
    e2 = Store(x, i)
    e3 = Load(y1, y)
    e4 = Store(x, i)
    e5 = Load(y1, y)
    e6 = Store(y, i)
    e7 = Load(x1, x)
    e8 = Local(y1, i)
    e9 = Load(y1, y)
    e10 = Local(a, c0)
    e11 = Store(y, a)
    m1 = Mfence()
    m2 = Mfence()
    m3 = Mfence()
    p = Seq(e1, Seq(While(b11, Seq(e2, Seq(m1, Seq(e3, Seq(While(b12, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b13, e8, e9))))))))), Seq(e10, e11)))
    
    b = Register("b")
    j = Register("j")
    x2 = Register("x2")
    y2 = Register("y2")
    b21 = Predicate(y1, "!=", i)
    b22 = Predicate(y1, "!=", c0)
    b23 = Predicate(x1, "==", i)
    
    e1 = Local(j, c2)
    e2 = Store(x, j)
    e3 = Load(y2, y)
    e4 = Store(x, j)
    e5 = Load(y2, y)
    e6 = Store(y, j)
    e7 = Load(x2, x)
    e8 = Local(y2, j)
    e9 = Load(y2, y)
    e10 = Local(b, c0)
    e11 = Store(y, b)
    m1 = Mfence()
    m2 = Mfence()
    m3 = Mfence()
    q = Seq(e1, Seq(While(b21, Seq(e2, Seq(m1, Seq(e3, Seq(While(b22, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b23, e8, e9))))))))), Seq(e10, e11)))
    
    c = Register("c")
    k = Register("k")
    x3 = Register("x3")
    y3 = Register("y3")
    b31 = Predicate(y1, "!=", i)
    b32 = Predicate(y1, "!=", c0)
    b33 = Predicate(x1, "==", i)
    
    e1 = Local(k, c3)
    e2 = Store(x, k)
    e3 = Load(y3, y)
    e4 = Store(x, k)
    e5 = Load(y3, y)
    e6 = Store(y, k)
    e7 = Load(x3, x)
    e8 = Local(y3, k)
    e9 = Load(y3, y)
    e10 = Local(c, c0)
    e11 = Store(y, c)
    m1 = Mfence()
    m2 = Mfence()
    m3 = Mfence()
    r = Seq(e1, Seq(While(b31, Seq(e2, Seq(m1, Seq(e3, Seq(While(b32, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b33, e8, e9))))))))), Seq(e10, e11)))
    
    m = Program('Lamport x86')
    m.add(p)
    m.add(q)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def lamport_x86_sync():
    
    a = Register("a")
    i = Register("i")
    x1 = Register("x1")
    y1 = Register("y1")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    
    b11 = Predicate(y1, "!=", i)
    b12 = Predicate(y1, "!=", c0)
    b13 = Predicate(x1, "==", i)
    
    e1 = Local(i, c1)
    e2 = Store(x, i)
    e3 = Load(y1, y)
    e4 = Store(x, i)
    e5 = Load(y1, y)
    e6 = Store(y, i)
    e7 = Load(x1, x)
    e8 = Local(y1, i)
    e9 = Load(y1, y)
    e10 = Local(a, c0)
    e11 = Store(y, a)
    m1 = Sync()
    m2 = Sync()
    m3 = Sync()
    p = Seq(e1, Seq(While(b11, Seq(e2, Seq(m1, Seq(e3, Seq(While(b12, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b13, e8, e9))))))))), Seq(e10, e11)))
    
    b = Register("b")
    j = Register("j")
    x2 = Register("x2")
    y2 = Register("y2")
    b21 = Predicate(y1, "!=", i)
    b22 = Predicate(y1, "!=", c0)
    b23 = Predicate(x1, "==", i)
    
    e1 = Local(j, c2)
    e2 = Store(x, j)
    e3 = Load(y2, y)
    e4 = Store(x, j)
    e5 = Load(y2, y)
    e6 = Store(y, j)
    e7 = Load(x2, x)
    e8 = Local(y2, j)
    e9 = Load(y2, y)
    e10 = Local(b, c0)
    e11 = Store(y, b)
    m1 = Sync()
    m2 = Sync()
    m3 = Sync()
    q = Seq(e1, Seq(While(b21, Seq(e2, Seq(m1, Seq(e3, Seq(While(b22, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b23, e8, e9))))))))), Seq(e10, e11)))
    
    c = Register("c")
    k = Register("k")
    x3 = Register("x3")
    y3 = Register("y3")
    b31 = Predicate(y1, "!=", i)
    b32 = Predicate(y1, "!=", c0)
    b33 = Predicate(x1, "==", i)
    
    e1 = Local(k, c3)
    e2 = Store(x, k)
    e3 = Load(y3, y)
    e4 = Store(x, k)
    e5 = Load(y3, y)
    e6 = Store(y, k)
    e7 = Load(x3, x)
    e8 = Local(y3, k)
    e9 = Load(y3, y)
    e10 = Local(c, c0)
    e11 = Store(y, c)
    m1 = Mfence()
    m2 = Mfence()
    m3 = Mfence()
    r = Seq(e1, Seq(While(b31, Seq(e2, Seq(m1, Seq(e3, Seq(While(b32, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, If(b33, e8, e9))))))))), Seq(e10, e11)))
    
    m = Program('Lamport x86 (sync)')
    m.add(p)
    m.add(q)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def lamport_power():
    ### Barrieres added manually
    
    a = Register("a")
    i = Register("i")
    x1 = Register("x1")
    y1 = Register("y1")
    x = Location("x")
    y = Location("y")
    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    
    b11 = Predicate(y1, "!=", i)
    b12 = Predicate(y1, "!=", c0)
    b13 = Predicate(x1, "==", i)
    
    e1 = Local(i, c1)
    e2 = Store(x, i)
    e3 = Load(y1, y)
    e4 = Store(x, i)
    e5 = Load(y1, y)
    e6 = Store(y, i)
    e7 = Load(x1, x)
    e8 = Local(y1, i)
    e9 = Load(y1, y)
    e10 = Local(a, c0)
    e11 = Store(y, a)
    m1 = Sync()
    m2 = Sync()
    m3 = Sync()
    p = Seq(e1, Seq(While(b11, Seq(e2, Seq(m1, Seq(e3, Seq(Sync(), Seq(While(b12, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, Seq(Sync(), If(b13, e8, e9))))))))))), Seq(e10, e11)))
    
    b = Register("b")
    j = Register("j")
    x2 = Register("x2")
    y2 = Register("y2")
    b21 = Predicate(y1, "!=", i)
    b22 = Predicate(y1, "!=", c0)
    b23 = Predicate(x1, "==", i)
    
    e1 = Local(j, c2)
    e2 = Store(x, j)
    e3 = Load(y2, y)
    e4 = Store(x, j)
    e5 = Load(y2, y)
    e6 = Store(y, j)
    e7 = Load(x2, x)
    e8 = Local(y2, j)
    e9 = Load(y2, y)
    e10 = Local(b, c0)
    e11 = Store(y, b)
    m1 = Sync()
    m2 = Sync()
    m3 = Sync()
    q = Seq(e1, Seq(While(b21, Seq(e2, Seq(m1, Seq(e3, Seq(Sync(), Seq(While(b22, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, Seq(Sync(), If(b23, e8, e9))))))))))), Seq(e10, e11)))
    
    c = Register("c")
    k = Register("k")
    x3 = Register("x3")
    y3 = Register("y3")
    b31 = Predicate(y1, "!=", i)
    b32 = Predicate(y1, "!=", c0)
    b33 = Predicate(x1, "==", i)
    
    e1 = Local(k, c3)
    e2 = Store(x, k)
    e3 = Load(y3, y)
    e4 = Store(x, k)
    e5 = Load(y3, y)
    e6 = Store(y, k)
    e7 = Load(x3, x)
    e8 = Local(y3, k)
    e9 = Load(y3, y)
    e10 = Local(c, c0)
    e11 = Store(y, c)
    m1 = Sync()
    m2 = Sync()
    m3 = Sync()
    r = Seq(e1, Seq(While(b31, Seq(e2, Seq(m1, Seq(e3, Seq(Sync(), Seq(While(b32, Seq(e4, Seq(m2, e5))), Seq(e6, Seq(m3, Seq(e7, Seq(Sync(), If(b33, e8, e9))))))))))), Seq(e10, e11)))
    
    m = Program('Lamport Power')
    m.add(p)
    m.add(q)
    m.add(r)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def parker():

    c0 = Expression(0)
    c1 = Expression(1)
    a = Register("a")
    b = Register("b")
    c = Register("c")
    counter = Register("counter")
    cond = Location("cond")
    pcounter = Location("park_counter")

    e1 = Load(c, cond)
    e2 = Load(counter, pcounter)
    e3 = Local(a, c0)
    e4 = Store(pcounter, a)
    e5 = Load(c, cond)
    p = Seq(e1, While(Predicate(c, "==", c0), Seq(e2, Seq(e3, Seq(e4, e5)))))

    e6 = Local(b, c1)
    e7 = Store(cond, b)
    e8 = Mfence()
    e9 = Store(pcounter, b)
    q = Seq(e6, Seq(e7, Seq(e8, e9)))

    m = Program('Parker')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def parker_x86():

    c0 = Expression(0)
    c1 = Expression(1)
    a = Register("a")
    b = Register("b")
    c = Register("c")
    counter = Register("counter")
    cond = Location("cond")
    pcounter = Location("park_counter")

    e1 = Load(c, cond)
    e2 = Load(counter, pcounter)
    e3 = Local(a, c0)
    e4 = Store(pcounter, a)
    e5 = Load(c, cond)
    m1 = Mfence()
    p = Seq(e1, While(Predicate(c, "==", c0), Seq(e2, Seq(e3, Seq(e4, Seq(m1, e5))))))

    e6 = Local(b, c1)
    e7 = Store(cond, b)
    e8 = Mfence()
    e9 = Store(pcounter, b)
    q = Seq(e6, Seq(e7, Seq(e8, e9)))

    m = Program('Parker x86')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def parker_x86_sync():

    c0 = Expression(0)
    c1 = Expression(1)
    a = Register("a")
    b = Register("b")
    c = Register("c")
    counter = Register("counter")
    cond = Location("cond")
    pcounter = Location("park_counter")

    e1 = Load(c, cond)
    e2 = Load(counter, pcounter)
    e3 = Local(a, c0)
    e4 = Store(pcounter, a)
    e5 = Load(c, cond)
    m1 = Sync()
    p = Seq(e1, While(Predicate(c, "==", c0), Seq(e2, Seq(e3, Seq(e4, Seq(m1, e5))))))

    e6 = Local(b, c1)
    e7 = Store(cond, b)
    e8 = Sync()
    e9 = Store(pcounter, b)
    q = Seq(e6, Seq(e7, Seq(e8, e9)))

    m = Program('Parker x86 (sync)')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def peterson():
    
    a = Register("a")
    b = Register("b")
    f1 = Register("f1")
    t1 = Register("t1")
    c = Register("c")
    d = Register("d")
    f2 = Register("f2")
    t2 = Register("t2")
    flag2 = Location("flag2")
    flag1 = Location("flag1")
    turn = Location("turn")
    c0 = Expression(0)
    c1 = Expression(1)
    
    g1 = Local(a, c1)
    g2 = Store(flag2, a)
    g3 = Store(turn, a)
    g4 = Load(f1, flag1)
    g5 = Load(t1, turn)
    g6 = Load(f1, flag1)
    g7 = Load(t1, turn)
    g8 = Local(b, c0)
    g9 = Store(flag2, b)
    b2 = Predicate(Predicate(f2, "==", c1), "and", Predicate(t2, "==", c1))
    p = Seq(g1, Seq(g2, Seq(g3, Seq(g4, Seq(g5, Seq(While(b2, Seq(g6, g7)), Seq(g8, g9)))))))
    
    e1 = Local(c, c1)
    e2 = Store(flag1, c)
    e3 = Store(turn, c)
    e4 = Load(f2, flag2)
    e5 = Load(t2, turn)
    e6 = Load(f2, flag2)
    e7 = Load(t2, turn)
    e8 = Local(d, c0)
    e9 = Store(flag1, d)
    b1 = Predicate(Predicate(f1, "==", c1), "and", Predicate(t1, "==", c1))
    q = Seq(e1, Seq(e2, Seq(e3, Seq(e4, Seq(e5, Seq(While(b1, Seq(e6, e7)), Seq(e8, e9)))))))
    
    m = Program('Peterson')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def peterson_x86():
    
    a = Register("a")
    b = Register("b")
    f1 = Register("f1")
    t1 = Register("t1")
    c = Register("c")
    d = Register("d")
    f2 = Register("f2")
    t2 = Register("t2")
    flag2 = Location("flag2")
    flag1 = Location("flag1")
    turn = Location("turn")
    c0 = Expression(0)
    c1 = Expression(1)
    
    g1 = Local(a, c1)
    g2 = Store(flag2, a)
    g3 = Store(turn, a)
    m1 = Mfence()
    g4 = Load(f1, flag1)
    g5 = Load(t1, turn)
    g6 = Load(f1, flag1)
    g7 = Load(t1, turn)
    g8 = Local(b, c0)
    g9 = Store(flag2, b)
    b2 = Predicate(Predicate(f2, "==", c1), "and", Predicate(t2, "==", c1))
    p = Seq(g1, Seq(g2, Seq(g3, Seq(m1, Seq(g4, Seq(g5, Seq(While(b2, Seq(g6, g7)), Seq(g8, g9))))))))
    
    e1 = Local(c, c1)
    e2 = Store(flag1, c)
    e3 = Store(turn, c)
    m2 = Mfence()
    e4 = Load(f2, flag2)
    e5 = Load(t2, turn)
    e6 = Load(f2, flag2)
    e7 = Load(t2, turn)
    e8 = Local(d, c0)
    e9 = Store(flag1, d)
    b1 = Predicate(Predicate(f1, "==", c1), "and", Predicate(t1, "==", c1))
    q = Seq(e1, Seq(e2, Seq(e3, Seq(m2, Seq(e4, Seq(e5, Seq(While(b1, Seq(e6, e7)), Seq(e8, e9))))))))
    
    m = Program('Peterson x86')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def peterson_x86_sync():
    
    a = Register("a")
    b = Register("b")
    f1 = Register("f1")
    t1 = Register("t1")
    c = Register("c")
    d = Register("d")
    f2 = Register("f2")
    t2 = Register("t2")
    flag2 = Location("flag2")
    flag1 = Location("flag1")
    turn = Location("turn")
    c0 = Expression(0)
    c1 = Expression(1)
    
    g1 = Local(a, c1)
    g2 = Store(flag2, a)
    g3 = Store(turn, a)
    m1 = Sync()
    g4 = Load(f1, flag1)
    g5 = Load(t1, turn)
    g6 = Load(f1, flag1)
    g7 = Load(t1, turn)
    g8 = Local(b, c0)
    g9 = Store(flag2, b)
    b2 = Predicate(Predicate(f2, "==", c1), "and", Predicate(t2, "==", c1))
    p = Seq(g1, Seq(g2, Seq(g3, Seq(m1, Seq(g4, Seq(g5, Seq(While(b2, Seq(g6, g7)), Seq(g8, g9))))))))
    
    e1 = Local(c, c1)
    e2 = Store(flag1, c)
    e3 = Store(turn, c)
    m2 = Sync()
    e4 = Load(f2, flag2)
    e5 = Load(t2, turn)
    e6 = Load(f2, flag2)
    e7 = Load(t2, turn)
    e8 = Local(d, c0)
    e9 = Store(flag1, d)
    b1 = Predicate(Predicate(f1, "==", c1), "and", Predicate(t1, "==", c1))
    q = Seq(e1, Seq(e2, Seq(e3, Seq(m2, Seq(e4, Seq(e5, Seq(While(b1, Seq(e6, e7)), Seq(e8, e9))))))))
    
    m = Program('Peterson x86 (sync)')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def peterson_power():
    
    a = Register("a")
    b = Register("b")
    f1 = Register("f1")
    t1 = Register("t1")
    c = Register("c")
    d = Register("d")
    f2 = Register("f2")
    t2 = Register("t2")
    flag2 = Location("flag2")
    flag1 = Location("flag1")
    turn = Location("turn")
    c0 = Expression(0)
    c1 = Expression(1)
    
    g1 = Local(a, c1)
    g2 = Store(flag2, a)
    g3 = Store(turn, a)
    m1 = Sync()
    g4 = Load(f1, flag1)
    g5 = Load(t1, turn)
    g6 = Load(f1, flag1)
    g7 = Load(t1, turn)
    g8 = Local(b, c0)
    g9 = Store(flag2, b)
    b2 = Predicate(Predicate(f2, "==", c1), "and", Predicate(t2, "==", c1))
    p = Seq(g1, Seq(g2, Seq(Sync(), Seq(g3, Seq(m1, Seq(g4, Seq(Lwsync(), Seq(g5, Seq(Lwsync(), Seq(While(b2, Seq(g6, Seq(Lwsync(), g7))), Seq(g8, g9)))))))))))
    
    e1 = Local(c, c1)
    e2 = Store(flag1, c)
    e3 = Store(turn, c)
    m2 = Sync()
    e4 = Load(f2, flag2)
    e5 = Load(t2, turn)
    e6 = Load(f2, flag2)
    e7 = Load(t2, turn)
    e8 = Local(d, c0)
    e9 = Store(flag1, d)
    b1 = Predicate(Predicate(f1, "==", c1), "and", Predicate(t1, "==", c1))
    q = Seq(e1, Seq(e2, Seq(Sync(), Seq(e3, Seq(m2, Seq(e4, Seq(Lwsync(), Seq(e5, Seq(Lwsync(), Seq(While(b1, Seq(e6, Seq(Lwsync(), e7))), Seq(e8, e9)))))))))))
    
    m = Program('Peterson Power')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()
    
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def szymanski():

    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    c4 = Expression(4)
    flag1 = Location("flag1")
    flag2 = Location("flag2")
    a1 = Register("a")
    f11 = Register("f1")
    f21 = Register("f2")
    a2 = Register("a")
    f1 = Register("f1")
    f2 = Register("f2")
    b11 = Predicate(f2, ">=", c3)
    b21 = Predicate(f2, "==", c1)
    b31 = Predicate(f2, "!=", c4)
    b41 = Predicate(f2, ">=", c2)
    b51 = Predicate(Predicate(c2, "<=", f2), "and", Predicate(f2, "<=", c3))
    b12 = Predicate(f1, ">=", c3)
    b22 = Predicate(f1, "==", c1)
    b32 = Predicate(f1, "!=", c4)
    b42 = Predicate(f1, ">=", c2)
    b52 = Predicate(Predicate(c2, "<=", f1), "and", Predicate(f1, "<=", c3))

    e1 = Local(a1, c1)
    e2 = Store(flag1, a1)
    e3 = Load(f2, flag2)
    e4 = Load(f2, flag2)
    e5 = Local(a1, c3)
    e6 = Store(flag1, a1)
    e7 = Load(f2, flag2)
    e8 = Local(a1, c2)
    e9 = Store(flag1, a1)
    e10 = Load(f2, flag2)
    e11 = Load(f2, flag2)
    e12 = Local(a1, c4)
    e13 = Store(flag1, a1)
    e14 = Load(f2, flag2)
    e15 = Load(f2, flag2)
    e16 = Load(f2, flag2)
    e17 = Load(f2, flag2)
    e18 = Local(a1, c0)
    e19 = Store(flag1, a1)
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(e3, Seq(While(b11, e4), Seq(e5, Seq(e6, Seq(e7, Seq(If(b21, Seq(e8, Seq(e9, Seq(e10, While(b31, e11)))), Skip()), Seq(e12, Seq(e13, Seq(e14, Seq(While(b41, e15), Seq(e16, Seq(While(b51, e17), Seq(e18, e19))))))))))))))))

    g1 = Local(a2, c1)
    g2 = Store(flag2, a2)
    g3 = Load(f1, flag1)
    g4 = Load(f1, flag1)
    g5 = Local(a2, c3)
    g6 = Store(flag2, a2)
    g7 = Load(f1, flag1)
    g8 = Local(a2, c2)
    g9 = Store(flag2, a2)
    g10 = Load(f1, flag1)
    g11 = Load(f1, flag1)
    g12 = Local(a2, c4)
    g13 = Store(flag2, a2)
    g14 = Load(f1, flag1)
    g15 = Load(f1, flag1)
    g16 = Load(f1, flag1)
    g17 = Load(f1, flag1)
    g18 = Local(a2, c0)
    g19 = Store(flag2, a2)
    q = While(Expression(True), Seq(g1, Seq(g2, Seq(g3, Seq(While(b12, g4), Seq(g5, Seq(g6, Seq(g7, Seq(If(b22, Seq(g8, Seq(g9, Seq(g10, While(b32, g11)))), Skip()), Seq(g12, Seq(g13, Seq(g14, Seq(While(b42, g15), Seq(g16, Seq(While(b52, g17), Seq(g18, g19))))))))))))))))

    m = Program('Szymanski')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)
    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def szymanski_x86():

    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    c4 = Expression(4)
    flag1 = Location("flag1")
    flag2 = Location("flag2")
    a1 = Register("a")
    f11 = Register("f1")
    f21 = Register("f2")
    a2 = Register("a")
    f1 = Register("f1")
    f2 = Register("f2")
    b11 = Predicate(f2, ">=", c3)
    b21 = Predicate(f2, "==", c1)
    b31 = Predicate(f2, "!=", c4)
    b41 = Predicate(f2, ">=", c2)
    b51 = Predicate(Predicate(c2, "<=", f2), "and", Predicate(f2, "<=", c3))
    b12 = Predicate(f1, ">=", c3)
    b22 = Predicate(f1, "==", c1)
    b32 = Predicate(f1, "!=", c4)
    b42 = Predicate(f1, ">=", c2)
    b52 = Predicate(Predicate(c2, "<=", f1), "and", Predicate(f1, "<=", c3))

    e1 = Local(a1, c1)
    e2 = Store(flag1, a1)
    e3 = Load(f2, flag2)
    e4 = Load(f2, flag2)
    e5 = Local(a1, c3)
    e6 = Store(flag1, a1)
    e7 = Load(f2, flag2)
    e8 = Local(a1, c2)
    e9 = Store(flag1, a1)
    e10 = Load(f2, flag2)
    e11 = Load(f2, flag2)
    e12 = Local(a1, c4)
    e13 = Store(flag1, a1)
    e14 = Load(f2, flag2)
    e15 = Load(f2, flag2)
    e16 = Load(f2, flag2)
    e17 = Load(f2, flag2)
    e18 = Local(a1, c0)
    e19 = Store(flag1, a1)
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Mfence(), Seq(e3, Seq(While(b11, e4), Seq(e5, Seq(e6, Seq(Mfence(), Seq(e7, Seq(If(b21, Seq(e8, Seq(e9, Seq(Mfence(), Seq(e10, While(b31, e11))))), Skip()), Seq(e12, Seq(e13, Seq(Mfence(), Seq(e14, Seq(While(b41, e15), Seq(e16, Seq(While(b51, e17), Seq(e18, e19)))))))))))))))))))

    g1 = Local(a2, c1)
    g2 = Store(flag2, a2)
    g3 = Load(f1, flag1)
    g4 = Load(f1, flag1)
    g5 = Local(a2, c3)
    g6 = Store(flag2, a2)
    g7 = Load(f1, flag1)
    g8 = Local(a2, c2)
    g9 = Store(flag2, a2)
    g10 = Load(f1, flag1)
    g11 = Load(f1, flag1)
    g12 = Local(a2, c4)
    g13 = Store(flag2, a2)
    g14 = Load(f1, flag1)
    g15 = Load(f1, flag1)
    g16 = Load(f1, flag1)
    g17 = Load(f1, flag1)
    g18 = Local(a2, c0)
    g19 = Store(flag2, a2)
    q = While(Expression(True), Seq(g1, Seq(g2, Seq(Mfence(), Seq(g3, Seq(While(b12, g4), Seq(g5, Seq(g6, Seq(Mfence(), Seq(g7, Seq(If(b22, Seq(g8, Seq(g9, Seq(Mfence(), Seq(g10, While(b32, g11))))), Skip()), Seq(g12, Seq(g13, Seq(Mfence(), Seq(g14, Seq(While(b42, g15), Seq(g16, Seq(While(b52, g17), Seq(g18, g19)))))))))))))))))))

    m = Program('Szymanski x86')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    TSOSC(m, False, True)
    PSOSC(m, False, True)
    PSOTSO(m, False, True)
    RMOSC(m, False, True)
    RMOTSO(m, False, True)
    RMOPSO(m, False, True)
    RMOAlpha(m, False, True)
    AlphaSC(m, False, True)
    AlphaTSO(m, False, True)
    AlphaPSO(m, False, True)
    AlphaRMO(m, False, True)

def szymanski_x86_sync():

    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    c4 = Expression(4)
    flag1 = Location("flag1")
    flag2 = Location("flag2")
    a1 = Register("a")
    f11 = Register("f1")
    f21 = Register("f2")
    a2 = Register("a")
    f1 = Register("f1")
    f2 = Register("f2")
    b11 = Predicate(f2, ">=", c3)
    b21 = Predicate(f2, "==", c1)
    b31 = Predicate(f2, "!=", c4)
    b41 = Predicate(f2, ">=", c2)
    b51 = Predicate(Predicate(c2, "<=", f2), "and", Predicate(f2, "<=", c3))
    b12 = Predicate(f1, ">=", c3)
    b22 = Predicate(f1, "==", c1)
    b32 = Predicate(f1, "!=", c4)
    b42 = Predicate(f1, ">=", c2)
    b52 = Predicate(Predicate(c2, "<=", f1), "and", Predicate(f1, "<=", c3))

    e1 = Local(a1, c1)
    e2 = Store(flag1, a1)
    e3 = Load(f2, flag2)
    e4 = Load(f2, flag2)
    e5 = Local(a1, c3)
    e6 = Store(flag1, a1)
    e7 = Load(f2, flag2)
    e8 = Local(a1, c2)
    e9 = Store(flag1, a1)
    e10 = Load(f2, flag2)
    e11 = Load(f2, flag2)
    e12 = Local(a1, c4)
    e13 = Store(flag1, a1)
    e14 = Load(f2, flag2)
    e15 = Load(f2, flag2)
    e16 = Load(f2, flag2)
    e17 = Load(f2, flag2)
    e18 = Local(a1, c0)
    e19 = Store(flag1, a1)
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Sync(), Seq(e3, Seq(While(b11, e4), Seq(e5, Seq(e6, Seq(Sync(), Seq(e7, Seq(If(b21, Seq(e8, Seq(e9, Seq(Sync(), Seq(e10, While(b31, e11))))), Skip()), Seq(e12, Seq(e13, Seq(Sync(), Seq(e14, Seq(While(b41, e15), Seq(e16, Seq(While(b51, e17), Seq(e18, e19)))))))))))))))))))

    g1 = Local(a2, c1)
    g2 = Store(flag2, a2)
    g3 = Load(f1, flag1)
    g4 = Load(f1, flag1)
    g5 = Local(a2, c3)
    g6 = Store(flag2, a2)
    g7 = Load(f1, flag1)
    g8 = Local(a2, c2)
    g9 = Store(flag2, a2)
    g10 = Load(f1, flag1)
    g11 = Load(f1, flag1)
    g12 = Local(a2, c4)
    g13 = Store(flag2, a2)
    g14 = Load(f1, flag1)
    g15 = Load(f1, flag1)
    g16 = Load(f1, flag1)
    g17 = Load(f1, flag1)
    g18 = Local(a2, c0)
    g19 = Store(flag2, a2)
    q = While(Expression(True), Seq(g1, Seq(g2, Seq(Sync(), Seq(g3, Seq(While(b12, g4), Seq(g5, Seq(g6, Seq(Sync(), Seq(g7, Seq(If(b22, Seq(g8, Seq(g9, Seq(Sync(), Seq(g10, While(b32, g11))))), Skip()), Seq(g12, Seq(g13, Seq(Sync(), Seq(g14, Seq(While(b42, g15), Seq(g16, Seq(While(b52, g17), Seq(g18, g19)))))))))))))))))))

    m = Program('Szymanski x86 (sync)')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)

def szymanski_power():

    c0 = Expression(0)
    c1 = Expression(1)
    c2 = Expression(2)
    c3 = Expression(3)
    c4 = Expression(4)
    flag1 = Location("flag1")
    flag2 = Location("flag2")
    a1 = Register("a")
    f11 = Register("f1")
    f21 = Register("f2")
    a2 = Register("a")
    f1 = Register("f1")
    f2 = Register("f2")
    b11 = Predicate(f2, ">=", c3)
    b21 = Predicate(f2, "==", c1)
    b31 = Predicate(f2, "!=", c4)
    b41 = Predicate(f2, ">=", c2)
    b51 = Predicate(Predicate(c2, "<=", f2), "and", Predicate(f2, "<=", c3))
    b12 = Predicate(f1, ">=", c3)
    b22 = Predicate(f1, "==", c1)
    b32 = Predicate(f1, "!=", c4)
    b42 = Predicate(f1, ">=", c2)
    b52 = Predicate(Predicate(c2, "<=", f1), "and", Predicate(f1, "<=", c3))

    e1 = Local(a1, c1)
    e2 = Store(flag1, a1)
    e3 = Load(f2, flag2)
    e4 = Load(f2, flag2)
    e5 = Local(a1, c3)
    e6 = Store(flag1, a1)
    e7 = Load(f2, flag2)
    e8 = Local(a1, c2)
    e9 = Store(flag1, a1)
    e10 = Load(f2, flag2)
    e11 = Load(f2, flag2)
    e12 = Local(a1, c4)
    e13 = Store(flag1, a1)
    e14 = Load(f2, flag2)
    e15 = Load(f2, flag2)
    e16 = Load(f2, flag2)
    e17 = Load(f2, flag2)
    e18 = Local(a1, c0)
    e19 = Store(flag1, a1)
    p = While(Expression(True), Seq(e1, Seq(e2, Seq(Sync(), Seq(e3, Seq(Lwsync(), Seq(While(b11, Seq(e4, Lwsync())), Seq(e5, Seq(e6, Seq(Sync(), Seq(e7, Seq(If(b21, Seq(e8, Seq(e9, Seq(Sync(), Seq(e10, Seq(Lwsync(), While(b31, Seq(e11, Lwsync()))))))), Skip()), Seq(e12, Seq(e13, Seq(Sync(), Seq(e14, Seq(Lwsync(), Seq(While(b41, e15), Seq(e16, Seq(Lwsync(), Seq(While(b51, Seq(e17, Lwsync())), Seq(e18, e19))))))))))))))))))))))

    g1 = Local(a2, c1)
    g2 = Store(flag2, a2)
    g3 = Load(f1, flag1)
    g4 = Load(f1, flag1)
    g5 = Local(a2, c3)
    g6 = Store(flag2, a2)
    g7 = Load(f1, flag1)
    g8 = Local(a2, c2)
    g9 = Store(flag2, a2)
    g10 = Load(f1, flag1)
    g11 = Load(f1, flag1)
    g12 = Local(a2, c4)
    g13 = Store(flag2, a2)
    g14 = Load(f1, flag1)
    g15 = Load(f1, flag1)
    g16 = Load(f1, flag1)
    g17 = Load(f1, flag1)
    g18 = Local(a2, c0)
    g19 = Store(flag2, a2)
    q = While(Expression(True), Seq(g1, Seq(g2, Seq(Sync(), Seq(g3, Seq(Lwsync(), Seq(While(b12, Seq(g4, Lwsync())), Seq(g5, Seq(g6, Seq(Sync(), Seq(g7, Seq(If(b22, Seq(g8, Seq(g9, Seq(Sync(), Seq(g10, Seq(Lwsync(), While(b32, Seq(g11, Lwsync()))))))), Skip()), Seq(g12, Seq(g13, Seq(Sync(), Seq(g14, Seq(Lwsync(), Seq(While(b42, Seq(g15, Lwsync())), Seq(g16, Seq(Lwsync(), Seq(While(b52, Seq(g17, Lwsync())), Seq(g18, g19))))))))))))))))))))))

    m = Program('Szymanski Power')
    m.add(p)
    m.add(q)
    print m.name + "\n------------------------------------"
    m.initialize()

    PowerSC(m, False, True)
    PowerTSO(m, False, True)
    PowerPSO(m, False, True)
    PowerRMO(m, False, True)
    PowerAlpha(m, False, True)




if __name__ == "__main__":
    bakery()
    bakery_x86()
    bakery_x86_sync()
    bakery_power()    
    burns()
    burns_x86()
    burns_x86_sync()
    burns_power()
    dekker()
    dekker_x86()
    dekker_x86_sync()
    dekker_power()
    lamport()
    lamport_x86()
    lamport_x86_sync()
    lamport_power()
    parker()
    parker_x86()
    parker_x86_sync()
    peterson()
    peterson_x86()
    peterson_x86_sync()
    peterson_power()
    szymanski()
    szymanski_x86()
    szymanski_x86_sync()
    szymanski_power()
